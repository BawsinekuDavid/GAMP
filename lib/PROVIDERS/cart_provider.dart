import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:gmarket_app/models/order_module.dart';
import 'package:hive/hive.dart';
import 'package:logger/logger.dart';
import '../models/products_module.dart';

class CartProvider with ChangeNotifier {
  final Logger logger = Logger();
  late Box<Product> _cartBox;
  List<Product> _cartItems = [];
  double deliveryFee = 5.00;
  bool _isInitialized = false;

  List<Product> get cartItems => _cartItems;
  double get subtotal => _calculateSubtotal();
  double get total => subtotal + deliveryFee;

  Future<void> initialize() async {
    if (!_isInitialized) {
      _cartBox = await Hive.openBox<Product>('cartBox');
      await loadCartItems();
      _isInitialized = true;
      notifyListeners();
    }
  }

  Future<void> ensureInitialized() async {
    if (!_isInitialized) {
      await initialize();
    }
  }

  Future<void> loadCartItems() async {
    _cartItems = _cartBox.values.toList();
    notifyListeners();
  }

  Future<void> addToCart(Product product) async {
    await ensureInitialized();
    final existingIndex = _cartItems.indexWhere((item) => item.id == product.id);

    if (existingIndex >= 0) {
      _cartItems[existingIndex].quantity += product.quantity;
    } else {
      _cartItems.add(product);
    }

    await _cartBox.put(product.id, product);
    notifyListeners();
  }

  Future<void> updateQuantity(String productId, int newQuantity) async {
    await ensureInitialized();
    final index = _cartItems.indexWhere((item) => item.id == productId);
    if (index >= 0) {
      _cartItems[index].quantity = newQuantity;
      await _cartBox.put(productId, _cartItems[index]);
      notifyListeners();
    }
  }

  Future<void> removeFromCart(String productId) async {
    await ensureInitialized();
    _cartItems.removeWhere((item) => item.id == productId);
    await _cartBox.delete(productId);
    notifyListeners();
    Fluttertoast.showToast(msg: "Item removed from cart");
  }

  Future<void> clearCart() async {
    await ensureInitialized();
    _cartItems.clear();
    await _cartBox.clear();
    notifyListeners();
  }



  double _calculateSubtotal() {
    return _cartItems.fold(0, (sum, item) => sum + (item.unitPrice * item.quantity));
  }

  void updateDeliveryFee(double newFee) {
    deliveryFee = newFee;
    notifyListeners();
  }

  Future<Order> checkout({
    required String userId,
    required String paymentMethod,
    required String deliveryAddress, 
    required double deliveryFee,
  }) async {
    await ensureInitialized();

    if (cartItems.isEmpty) {
      throw Exception('Cart is empty');
    }

    try {
      final orderItems = cartItems.map((item) => OrderItem(
        productId: item.id,
        customerId: item.id,
        quantity: item.quantity,
      )).toList();

      final order = Order(
        id: '', // Will be generated by server
        product: 'Multiple Products', // Or first product name
        quantity: cartItems.length.toString(),
        totalPrice: total,
        unitPrice: subtotal,
        status: 'PENDING',
        createdAt: DateTime.now(),
        items: orderItems,
        imageUrl: cartItems.first.imageUrl, // First product image
        vendor: cartItems.map((e) => e.id).join(', '),
      );

      // Clear cart after successful checkout
      await clearCart();
      
      return order;
    } catch (e) {
      logger.e("Checkout failed", error: e);
      throw Exception('Checkout failed: ${e.toString()}');
    }
  }

  void incrementQuantity () {

  }

  void decrementQuantity(String itemId) {
    final index = _cartItems.indexWhere((item) => item.id == itemId);
    if (index >= 0) {
      if (_cartItems[index].quantity > 1) {
        _cartItems[index] = _cartItems[index].copyWith(
          quantity: _cartItems[index].quantity - 1,
        ) as Product;
      } else {
        _cartItems.removeAt(index);
      }
      notifyListeners();
    }

  }

  void removeItem(String itemId) {
    _cartItems.removeWhere((item) => item.id == itemId);
    notifyListeners();
  }
}